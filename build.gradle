import com.github.benmanes.gradle.versions.updates.DependencyUpdatesTask

buildscript {
	dependencies {
		classpath(libs.jib.ext.layer.filter)
	}
}

plugins {
	id("application")
	alias(libs.plugins.jib)
	alias(libs.plugins.spotless)
	alias(libs.plugins.versionsplg)
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

application {
	mainClass = "xyz.vpavic.traintracker.TrainTrackerApplication"
}

repositories {
	mavenCentral()
	maven { url = "https://repo.spring.io/libs-milestone/" }
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom(developmentOnly)
	}
	javaAgent {
		visible = false
		transitive = false
		canBeConsumed = false
	}
	all {
		exclude(group: "io.lettuce")
	}
}

dependencies {
	implementation(platform(libs.spring.boot.dependencies))
	implementation(libs.commons.lang)
	implementation(libs.flyway)
	implementation(libs.jedis)
	implementation(libs.jsoup)
	implementation(libs.newrelic.logback)
	implementation(libs.spring.boot.starter.cache)
	implementation(libs.spring.boot.starter.data.redis)
	implementation(libs.spring.boot.starter.jdbc)
	implementation(libs.spring.boot.starter.thymeleaf)
	implementation(libs.spring.boot.starter.web)
	implementation(libs.spring.session.data.redis)
	implementation(libs.webjars.bootstrap)
	implementation(libs.webjars.flagiconcss)
	implementation(libs.webjars.htmx)
	implementation(libs.webjars.mousetrap)
	implementation(libs.webjars.popperjs)

	runtimeOnly(platform(libs.spring.boot.dependencies))
	runtimeOnly(libs.jdbc.postgresql)

	annotationProcessor(platform(libs.spring.boot.dependencies))
	annotationProcessor(libs.spring.framework.context.indexer)

	developmentOnly(platform(libs.spring.boot.dependencies))
	developmentOnly(libs.spring.boot.devtools)

	javaAgent(libs.newrelic.agent)
}

testing {
	suites {
		test {
			useJUnitJupiter()
			dependencies {
				implementation(libs.archunit.junit5)
				implementation(libs.spring.boot.starter.test)
			}
		}
	}
}

tasks.named("dependencyUpdates", DependencyUpdatesTask).configure {
	revision = "release"
	gradleReleaseChannel = "current"
	rejectVersionIf {
		def isStable = { String version ->
			def isStableVersion = (version ==~ /^[0-9,.v-]+(-r)?$/)
			def isStableKeyword = ["RELEASE", "FINAL", "GA"].any({ version.toUpperCase().contains(it) })
			return isStableVersion || isStableKeyword
		}
		isStable(it.currentVersion) && !isStable(it.candidate.version)
	}
}

spotless {
	java {
		indentWithTabs()
		importOrder("java", "javax", "", "xyz.vpavic", "\\#")
	}
	groovyGradle {
		indentWithTabs()
	}
}

jib {
	from {
		image = "azul/zulu-openjdk:17.0.3-jre@sha256:33285363d744e69bf342e300cec00cf1810630e753954968549ec7f4140a83f6"
	}
	container {
		jvmFlags = configurations.javaAgent.collect { "-javaagent:" + it.name }
	}
	extraDirectories {
		paths = configurations.javaAgent.collect { it.parent }
	}
	pluginExtensions {
		pluginExtension {
			implementation = "com.google.cloud.tools.jib.gradle.extension.layerfilter.JibLayerFilterExtension"
			configuration {
				filters {
					filter {
						glob = "**/spring-boot-devtools-*.jar"
					}
				}
			}
		}
	}
}
