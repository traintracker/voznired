plugins {
    id("application")
    alias(libs.plugins.jib)
    alias(libs.plugins.spotless)
    alias(libs.plugins.versionsplg)
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    mainClass = "io.vpavic.traintracker.TrainTrackerApplication"
}

repositories {
    mavenCentral()
    maven { url = "https://repo.spring.io/libs-milestone/" }
}

configurations {
    javaAgent {
        visible = false
        transitive = false
        canBeConsumed = false
    }
}

dependencies {
    implementation(platform(libs.spring.boot.dependencies))
    implementation("com.github.ben-manes.caffeine:caffeine")
    implementation(libs.jsoup)
    implementation(libs.newrelic.logback)
    implementation("org.codehaus.janino:janino")
    implementation("org.flywaydb:flyway-core")
    implementation("org.postgresql:postgresql")
    implementation("org.springframework.boot:spring-boot-starter-cache")
    implementation("org.springframework.boot:spring-boot-starter-jdbc")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.session:spring-session-jdbc")

    javaAgent(libs.newrelic.agent)

    testImplementation(platform(libs.testcontainers.bom))
    testImplementation(libs.archunit.junit5)
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.testcontainers:postgresql")
    testImplementation("org.testcontainers:testcontainers")
}

tasks.withType(Test) {
    useJUnitPlatform()
}

dependencyUpdates {
    revision = "release"
    gradleReleaseChannel = "current"
    rejectVersionIf {
        def isStable = { String version ->
            def isStableVersion = (version ==~ /^[0-9,.v-]+(-r)?$/)
            def isStableKeyword = ["RELEASE", "FINAL", "GA"].any({ version.toUpperCase().contains(it) })
            return isStableVersion || isStableKeyword
        }
        isStable(it.currentVersion) && !isStable(it.candidate.version)
    }
}

spotless {
}

jib {
    from {
        image = "azul/zulu-openjdk:17.0.0-17.28.13-jre"
    }
    container {
        jvmFlags = configurations.javaAgent.collect { "-javaagent:" + it.name }
    }
    extraDirectories {
        paths = configurations.javaAgent.collect { it.parent }
    }
}
